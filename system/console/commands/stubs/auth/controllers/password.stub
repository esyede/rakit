<?php

defined('DS') or exit('No direct script access.');

class Auth_Password_Controller extends Controller
{
    /**
     * Buat instance controller baru.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('before', 'csrf|throttle:60,1');
    }

    /**
     * Tampilkan formulir kirim ulang email.
     *
     * @return \System\Response
     */
    public function action_show_resend()
    {
        return View::make('auth.passwords.email');
    }

    /**
     * Tangani kirim ulang email.
     *
     * @return \System\Response
     */
    public function action_resend()
    {
        $validation = Validator::make(Input::all(), [
            'email' => 'required|email|exists:users|max:191',
        ]);

        if ($validation->fails()) {
            return Redirect::back()
                ->with_input()
                ->with_errors($validation);
        }

        $token = Str::random();

        DB::table('password_resets')->insert([
            'email' => Input::get('email'),
            'token' => $token,
            'created_at' => Date::make(),
        ]);

        $html = View::make('auth.email.reset', compact('token'))->render();
        Email::from(config('email.from.email'))
            ->to(Input::get('email'))
            ->subject('Reset Password')
            ->html_body($html)
            ->priority(Email::HIGH)
            ->send();

        return Redirect::back()
            ->with('status', 'A password reset link has been sent to your email address.');
    }

    /**
     * Tampilkan formulir reset password.
     *
     * @return \System\Response
     */
    public function action_show_reset()
    {
        $token = URI::segment(3);

        if (!$token) {
            return Response::error(404);
        }

        $reset = DB::table('password_resets')
            ->where('token', $token)
            ->first();

        if (!$reset) {
            return Response::error(404);
        }

        return View::make('auth.passwords.reset')
            ->with('token', $reset->token);
    }

    /**
     * Tangani permintaan reset password.
     *
     * @return \System\Response
     */
    public function action_reset()
    {
        $validation = Validator::make(Input::all(), [
            'token' => 'required',
            'email' => 'required|email|max:191',
            'password' => 'required|confirmed|min:8|max:191',
        ]);

        if ($validation->fails()) {
            return Redirect::back()
                ->with_input()
                ->with_errors($validation)
                ->with('token', Input::get('token'));
        }

        $reset = DB::table('password_resets')
            ->where('token', Input::get('token'))
            ->first();

        if (!$reset) {
            return Response::error(404);
        }

        $user = DB::table('users')->where('email', Input::get('email'))->first();

        if (!$user) {
            return Response::error(404);
        }

        DB::table('users')->where('id', $user->id)->update([
            'password' => Hash::make(Input::get('password')),
            'updated_at' => Date::make(),
        ]);

        DB::table('password_resets')->delete($reset->id);

        Auth::login($user->id);

        return Redirect::to('/dashboard')
            ->with('status', sprintf(
                'Your password has been successfuly reset to: %s',
                Input::get('password')
            ));
    }
}
